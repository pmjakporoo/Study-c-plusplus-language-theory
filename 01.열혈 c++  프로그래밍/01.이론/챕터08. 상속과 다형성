1. 객체 포인터 변수: 객체의 주소 값을 저장하는 포인터 변수
  - 클래스를 기반으로도 포인터 변수를 선언할 수 있다.
    ex) Person * ptr; // 포인터 변수 선언
        ptr = new Person(); // 포인터 변수의 객체 참조
        - Person형 포인터는 Person 객체 뿐만 아니라, Person을 상속하는 유도 클래스의 객체도 가리킬 수 있다.

        class Student : public Person {
          ...
        };

        - Person형 포인터 변수는 아래 문장에서 보이듯이 Student객체도 가리킬 수 있다.
        Person * ptr = new Student();

        - Student 클래스를 상속하는 유도 클래스 PartTimeStudent가 다음의 형태로 정의되었다고 가정하면,
          Class PartTimeStudent : public Student {
            ...
          };

          Person형 포인터 변수는 아래의 문장에서 보이듯이 PartTimeStudent 객체도 가리킬 수 있다.
          Person * ptr = new PartTimeStudent();
        - 뿐만 아니라, Student형 포인터 변수도 아래의 문장에서 보이듯이 PartTimeStudent 객체를 가리킬 수 있다.
          Student * ptr = new PartTimeStudent();
  - 즉, C++에서 AAA형 포인터 변수는 AAA 객체 또는 AAA를 직접 혹은 간접적으로 상속하는 모든 객체를 가리킬 수 있다.
    (객체의 주소값을 저장할 수 있다.)
    예제코드) ObjectPointer.cpp
    - Student 객체와 PartTimeStudent 객체를 Person 객체의 일종으로 간주한다.
    - PartTimeStudent 객체도 Student 객체의 일종으로 간주한다.

2. '오렌지미디어 급여 관리 확장성 문제'의 1차적 해결과 함수 오버라이딩
  예제코드) EmployeeManager2.cpp
  - EmployeeHandler 갹체가 여전히 PermanentWorker 객체를 저장 및 관리하고 있다.

  이러한 상황에서 다음 상황을 추가한다.
  - 정규직, 영업직, 임시직 모두 고용의 한 형태이다.
  - 영업직은 정규직의 일종이다.
  - 영업직의 급여 : 기본급여(월 기본급여) + 인센티브 형태
  - 임시직의 급여 : 시간당 급여 X 일한 시간의 형태

  - 임시직에 해당하는 클래스 
    class TemporaryWorker : public Employee {
    	int workTime;
    	int payPerHour;
    public:
    	TemporaryWorker(const char* name, int pay) : Employee(name), workTime(0), payPerHour(pay) {}
    	void AddWorkTime(int time) {
    		workTime += time;
    	}
    	int GetPay() const {
    		return workTime * payPerHour;
    	}
    	void ShowSalaryInfo() const {
    		ShowYourName();
    		cout << "Salary: " << GetPay() << endl << endl;
    	}
    }

  - 영업직에 해당하는 클래스
    (영업직은 정규직의 일종이다. 따라서 PermanentWorker 클래스를 상속한다.)
  class SalesWorker : public ParmanentWorker {
  	int salesResult;
  	double bounsRatio;

  public:
  	SalesWorker(const char* name, int money, double ratio):
  		PermanentWorker(name, money), salesResult(0), bounsRatio(ratio) {}
  	void AddSalesResult(int value) {
  		salesResult += value;
  	}
  	int GetPay() const {
  		return ParmanentWorker::GetPay() + (int)salesResult * bounsRatio;
  	}
  	void ShowSalaryInfo() const {
  		ShowYourName();
  		cout << "salary: " << GetPay() << endl << endl;
  	}
  };

  - 다음은 main 함수의 일부분이다. 
  int main(void) {
	  SalesWorker seller("Hong", 1000, 0.1);
	  cout << seller.GetPay() << endl; // SalesWorker 클래스의 GetPay()함수가 호출된다. 
	  seller.ShowSalaryInfo(); // SalesWorker 클래스의 ShowSalaryInfo()함수가 호출된다.
	  ...
  }

2-1. 오버라이딩
  - PermanentWorker 클래스의 GetPay() 함수와 ShowSalaryInfo() 함수가 있는데, 유도 클래스인 
    SalesWorker 클래스에도 동일한 이름과 형태로 두 함수를 정의하였다.
    이를 가리켜 함수 오버라이딩이라 한다. 이렇게 함수가 오버라이딩이 되면, 
    오버라이딩 된 기초 클래스의 함수는, 오버라이딩을 한 유도 클래스의 함수에 가려진다.
    그래서 SalesWorker 클래스 내에서 GetPay()함수를 호출하면, SalesWorker 클래스에 정의된 GetPay() 함수가 호출된다.

 - SalesWorker클래스 내의 ParmanentWorker::GetPay()는 
    오버라이딩 된 기초 클래스의 GetPay()함수를 호출하는 구문이다.
    이렇듯, 클래스의 이름을 명시함으로 인해서 기초 클래스의 오버라이딩 된 함수를 호출할 수 있다.

    그리고 다음의 형태로도 호출이 가능하다.
    int main(void) {
      SalesWorker seller("Hong", 1000, 0.1);
      cout << seller.PermanentWorker::GetPay() << endl;
      seller.PermanentWorker::ShowSalaryInfo();
    }

참고. 함수 오버라이딩 vs 함수 오버로딩
  기초 클래스와 동일한 이름의 함수를 유도 클래스에서 정의한다고 해서 무조건 함수 오버라이딩이 되는 것은 아니다.
  매개변수의 자료형 및 개수가 다르면, 이는 함수 오버로딩이 되어, 전달되는 인자에 따라서 호출되는 함수가 결정된다.
  즉, 함수 오버로딩은 상속 관계에서도 구성이 될 수 있다.

3. SalesWorker 클래스에서 ShowSalaryInfo 함수를 오버라이딩 한 이유는?
 -  PermanentWorker 클래스의 ShowSalaryInfo 함수 내에서 호출되는 GetPay함수는  PermanentWorker 클래스에 정의된 GetPay
    함수의 호출로 이어진다. 따라서, SalesWorker 클래스에서 정의된 GetPay 함수가 호출되도록 SalesWorker 클래스에 별도의
    ShowSalaryInfo 함수를 정의해야만 한다.

4. 기초클래스의 포인터로 객체를 참조하면
 - c++ 컴파일러는 포인터 연산의 가능성 여부를 판단할 때, 포인터의 자료형을 기준으로 판단하지, 실제 가리키는 객체의 자료형을 기준으로 판단하지 않는다.
 - 유도 클래스는 기초 클래스의 유도 클래스니까 기초 클래스의 포인터 변수로 유도 객체의 참조가 가능하다.
 - 유도 클래스의 포인터 변수가 가리키는 객체는 분명 기초 클래스를 직접 혹은 간접적으로 상속하는 객체이다.
   그러니 기초클래스 형 포인터 변수로도 참조가 가능하다.

   예시코드)
   #include <iostream>
   using namespace std;

   class First {
     public:
	void FirstFunc() {
		cout << "FirstFunc" << endl;
	}
   };

   class Second: public First {
     public:
	void SecondFunc() {
		cout << "SecondFunc" << endl;
	}
    };

    class Third : public Second {
      public:
	void ThirdFunc() {
		cout << "ThirdFunc" << endl;
	}
    };

    int main(void) {
	Third* tptr = new Third();
	Second* sptr = tptr;
	First* fptr = sptr;
	...
	return 0;
    }
    - Third형 포인터 변수 tptr이 가리키는 객체는 무조건 Second형 포인터 변수 sptr도 가리킬 수 있으므로, 그리고
      Second형 포인터 변수 sptr이 가리키는 객체는 무조건 First형 포인터 변수 fptr도 가리킨 수 있으므로, 위의 코드
      에서는 컴파일 오류가 발생하지 않는다. 그러나 객체를 참조하는 포인터의 형에 따라서 호출할 수 있는 함수의 종류에는 
      다음과 같이 제한이 따른다.

      int main(void) {
	Third* tptr = new Third();
	Second* sptr = tptr;
	First* fptr = sptr;
	
	tptr->FirstFunc();   (o)
	tptr->SecondFunc();  (o)
	tptr->ThirdFunc();   (o)

	sptr->FirstFunc();   (o)
	sptr->SecondFunc();  (o)
	stpr->ThirdFunc();   (x)

	fptr->FirstFunc();   (o)
	fptr->SecondFunc();  (x)
	fptr->ThirdFunc();   (x)

	return 0;
      }
    - 즉, 포인터 형에 해당하는 클래스에 정의된 멤버에만 접근이 가능하다.
      따라서 EmployeeManager3.cpp예제코드에서 아래 클래스에서 주석을 풀면 왜 에러가 나는지 설명할 수 있다.
      (Employee 클래스 포인터 형에 해당하는 클래스에 정의된 멤버에 GetPay(), ShowSalaryInfo()가 없다.)
	class EmployHandler {
		Employee* empList[50];
		int empNum;
	public:
		EmployHandler() : empNum(0) {}
		void AddEmployee(Employee* emp) {
			empList[empNum++] = emp;
		}
		void ShowTotalSalary() const {
			int sum = 0;
			/*
			for(int i = 0; i < empNum; i++) {
				sum += empList[i]->GetPay();
			}
			*/
			cout << "salary sum: " << sum << endl;
		}
		void ShowAllSalaryInfo() const {
			/*
			for(int i = 0; i < empNum; i++) {
				empList[i]->ShowSalaryInfo();
			}
			*/
		}
		~EmployHandler() {
			for (int i = 0; i < empNum; i++) {
				delete empList[i];
			}
		}
	};

5. 함수의 오버라이딩과 포인터형 
 예제코드) FunctionOverride.cpp
 - 즉, First형 포인터 변수를 이용하면 First 클래스에 정의된 MyFunc 함수가 호출되고, 
   Second형 포인터 변수를 이용하면 Second 클래스에 정의된 MyFunc 함수가 호출되고,
   Third형 포인터 변수를 이용하면 Third 클래스에 정의된 MyFunc 함수가 호출된다.

- 하나씩 뜯어보면,
  1)	fptr->MyFunc();
  	컴파일러는 이 문장을 보면서 다음과 같이 판단한다.
  	fptr이 First형 포인터이니, 이 포인터 가리키는 객체를 대상으로 First클래스에 정의된 MyFunc 함수는 무조건 호출할 수 있구나.

  2)	sptr->MyFunc();
	sptr이 Second형 포인터이니, 이 포인터가 가리키는 객체는 First의 MyFunc 함수와 Second의 MyFunc함수가 오버라이딩 된 관계로
	존재하는구나. 그러면 오버라이딩을 한 Second의 MyFunc 함수를 호출해야겠다.

  3)	tptr->MyFunc();
	이 포인터 변수가 참조하는 객체에는 총 세개의 MyFunc함수가 존재하고 이들은 오버라이딩 관계를 갖기 때문에
	가장 마지막에 오버라이딩을 한 Third 클래스의 MyFunc 함수가 호출되어야 한다는 사실을 알고 있다.
	그래서 위 예제의 실행결과에서 보이듯이, Third 클래스의 MyFunc 함수가 호출이 된다.

6. 가상함수
 - 예제코드 FunctionOverride.cpp를 보면서 다음과 같은 생각을 해볼 수 있다.
   "함수를 오버라이딩 했다는 것은, 해당 객체에서 호출되어야 하는 함수를 바꾼다는 의미인데, 포인터 변수의 자료형에 따라서
   호출되는 함수의 종류가 달라진다는 것은 문제가 있어보인다."

-> 이러한 문제를 해결하기 위해서 객체지향에서는 가상함수라는 것을 제공한다. (이는 c++, java, c#과 같은 객체지향 언어에서도
   이와 동일한 개념의 문법이 제공된다.)

   가상함수를 선언하려면 아래와 같이
   class First {
	public:
	  virtual void MyFunc() {
	      cout << "FirstFunc" << endl;
	  }
   };

   virtual 키워드를 붙이면 된다.
   그리고 이렇게 가상함수가 선언되고 나면, 이 함수를 오버라이딩 하는 함수도 가상함수가 된다.
   따라서, 위와 같이 First 클래스의 MyFunc 함수가 virtual로 선언되면, 이를 오버라이딩하는 Second클래스의 MyFunc함수도,
   그리고 이를 오버라이딩 하는 Third 클래스의 MyFunc 함수도 가상함수가 된다.

   예제코드) FunctionVirtualOverride.cpp
   - 함수가 가상함수로 선언되면, 해당 함수 호출 시, 포인터의 자료형을 기반으로 호출 대상을 결정하지 않고,
     포인터 변수가 실제로 가리키는 객체를 참조하여 호출의 대상을 결정한다.

7. 오렌지미디어 급여관리 확장성 문제의 완전한 해결
	class EmployHandler {
		Employee* empList[50];
		int empNum;
	public:
		EmployHandler() : empNum(0) {}
		void AddEmployee(Employee* emp) {
			empList[empNum++] = emp;
		}
		void ShowTotalSalary() const {
			int sum = 0;
			/*
			for(int i = 0; i < empNum; i++) {
				sum += empList[i]->GetPay();
			}
			*/
			cout << "salary sum: " << sum << endl;
		}
		void ShowAllSalaryInfo() const {
			/*
			for(int i = 0; i < empNum; i++) {
				empList[i]->ShowSalaryInfo();
			}
			*/
		}
		~EmployHandler() {
			for (int i = 0; i < empNum; i++) {
				delete empList[i];
			}
		}
	};

 - 주석을 해제했을 때 에러가 나지 않을려면 Employee형 포인터 변수를 대상으로 GetPay, ShowSalaryInfo 함수를 호출 할 수 있도록 해야 한다.
   그리고 이를 위해서는 Employee 클래스에 GetPay함수와 ShowSalaryInfo 함수를 추가로 정의하고, 이를 가상함수로 선언하면 된다.
   예제코드) EmployeeManager4.cpp
