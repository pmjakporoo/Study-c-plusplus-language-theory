1. c++ 스타일의 초기화
  int num = 20;
  int &ref = num;
  과 같은 방식으로 변수와 참조자를 선언 및 초기화 가능하고,
  int num(20);
  int &ref(num);
  과 같은 방식도 가능하다. 즉, 위와 아래 방식이 동일하게 작동한다.

  class SoSimple {
    int num1;
    int num2;
  public:
    SoSimple(int n1, int n2): num1(n1), num2(n2) {}
    void ShowSimpleData() {
      cout << num1 << endl;
      cout << num2 << endl;
    }
  }

  int main(void) {
    SoSimple sim1(15, 20);
    SoSimple sim2 = sim1; // SoSimple sim2(sim1)과 같다.
    sim2.ShowSimpleData();
  }

   SoSimple sim2 = sim1는 sim2 객체를 새로 생성해서 객체 sim1과 sim2간의 멤버 대 맴버 복사가 일어난다.

  즉, 
  int num1=num2;
  int num1(num2);
  이 두문장이 동일한 의미로 해석되듯이,

  SoSimple sim2 = sim1;
  SoSimple sim2(sim1);도 동일한 의미로 해석이 된다.

2. SoSimple sim2(sim1)
  SoSimple형 객체를 생성한다.
  객체의 이름은 sim2이다.
  sim1을 인자로 받을 수 있는 생성자의 호출을 통해서 객체 생성을 완료한다.

  즉, 위의 객체 생성문에서 호출하고자 하는 생성자는 다음과 같이 SoSimple 객체를 인자로 받을 수 있는 생성자이다.
  SoSimple(const SoSimple &copy) { ... }
  이러한 생성자를 가리켜 복사 생성자라고 부른다.
  맴버 대 맴버의 복사에 사용되는 원본을 변경시키는 것은 복사의 개념을 무너뜨리는 행위가 되니, 
  키워드 const를 삽입해서 이러한 실수를 막아 놓는 것이 좋다.
 
  그리고 다음의 문장도 
  SoSimple sim2 = sim1;
  실은 다음의 형태로 묵시적 변환이 되어서(자동으로 변환이 되어서) 객체가 생성되는 것이다.
  SoSimple sim2(sim1);
  

3.자동으로 삽입이 되는 디폴트 복사 생성자
  복사생성자의 삽입 없이도 맴버 대 맴버의 복사가 진행된다.
  즉, 복사생성자를 정의하지 않으면, 맴버대 맴버의 복사를 진행하는 디폴트 복사 생성자가 자동으로 삽입된다.

  class SoSimple {
    int num1;
    int num2;
  public:
    SoSimple(int n1, int n2): num1(n1), num2(n2) {}
    void ShowSimpleData() {
      cout << num1 << endl;
      cout << num2 << endl;
    }
  }

  위의 클래스는 다음의 클래스 정의와 완전히 동일하다. 디폴트 복사 생성자가 자동으로 삽입되기 때문이다.

  
  class SoSimple {
    int num1;
    int num2;
  public:
    SoSimple(int n1, int n2): num1(n1), num2(n2) {}
    SoSimple(const SoSimple &copy): num1(copy.num1), num2(copy.num2) {

    }
    void ShowSimpleData() {
      cout << num1 << endl;
      cout << num2 << endl;
    }
  }

4. 변환에 의한 초기화를 막고 싶다면 explicit로 막을 수 있다.
  SoSimple sim2 = sim1; 은 자동으로 SoSimple sim2(sim1);으로 묵시적 변환이 일어나서 복사 생성자가 호출된다.
  하지만 이렇게 묵시적 변환을 막고 SoSimple sim2(sim1)이렇게 명시해야 복사생성자가 호출되게 하고 싶다면,
  아래와 같이 복사생성자 앞에 explicit 키워드를 붙여주면 된다. (복사 생성자의 묵시적 호출을 허용하지 않음)

  explicit SoSimple(const SoSimple &copy): num1(copy.num1), num2(copy.num2) {
  }
  이렇게 explicit를 적어주면 대입연산자(ex.SoSimple sim2 = sim1;)를 이용한 객체의 생성 및 초기화는 불가능하다.

  explicit 키워드는 복사생성자에만 붙일 수 있는 것이 아니다.
  생성자에도 붙일 수 있다.

  
  class SoSimple {
    int num;

  public:
    explicit SoSimple(int n): num1(n1){}
    void ShowSimpleData() {
      cout << num << endl;
    }
  }

  이렇게 생성자 앞에 explicit를 붙여놓으면 
  SoSimple sim1 = 3; 과 같은 형태로 객체를 생성할 수 없다.
  SoSimple sim1(3); 과 같은 형태로 객체를 생성해야 한다.

참고) 복사생성자의 매개변수는 반드시 참조형이여야한다.

5. 디폴트 복사 생성자(얕은 복사)의 문제점
  디폴트 복사 생성자는 멤버대 멤버의 복사를 진행하는데, 이러한 방식의 복사를 가리켜 얕은복사라 한다.
  이는 멤버변수가 힙의 메모리 공간을 참조하는 경우에 문제가 된다. 

  예시코드) ShallowCopyError.cpp
  - 예시코드에서 man2 객체가 소멸됨과 동시에 소멸자에서 delete를 이용한 name이 가리키는 메모리의 해제가 진행되는데,
    이후에 man1 객체가 소멸될 때도 소멸자가 자동으로 실행된다. 그런데 man1객체의 name이 가리키는 메모리가 이미 해제가 진행되었다. 
    이 부분에서 문제가 발생하게 된다.
    즉, man2와 man1의 각각의 name이 동일한 메모리를 가리키는게 문제가 되는 것이다. 

    왜냐하면 man2객체가 생성될 때 디폴트 복사 생성자가
    실행되어 얕은 복사가 진행 되었기 때문이다. 

6. 깊은 복사를 위한 복사 생성자의 정의 
  예시코드) ShallowCopyErrorClear.cpp
  복사 생성자가 실행될 때, 만들어지는 객체와 복사의 대상이 되는 객체의 name이 각각의 다른 메모리를 가리키게 바꿔주면 문제가 해결된다.

  즉, 
    Person(const Person& copy) : age(copy.age) {
    	name = new char[strlen(copy.name) + 1];
    	strcpy(name, copy.name);
    }
  복사생성자를 위와 같이 바꿔줬다.

7. 복사 생성자의 호출 시점은?
  - 기존에 생성된 객체를 이용해서 새로운 객체를 초기화 하는 경우
    ex) SoSimple obj2 = obj1; // 객체 obj2가 생성되면서 전달되는 obj1인자로 초기화 된다.
  - call-by-value 방식의 함수 호출 과정에서 객체를 인자로 전달하는 경우
    ex) SoSimple SimpleFuncObj(SoSimple ob) {
          .....
        }

        int main(void) {
          SoSimple obj;
          SimpleFuncObj(obj); // 함수 호출 시, 매개변수 ob객체가 생성되면서 전달되는 obj인자로 초기화 된다.
        }
  - 객체를 반환하되, 참조형으로 반환하지 않는 경우
    ex) SoSimple SimpleFuncObj(SoSimple ob) {
          .....
          return ob; // 반환되는 순간 메모리 공간이 할당되면서 동시에 반환 값인 ob객체로 초기화 된다.
        }
      
        -> 함수가 값을 반환하면, 별도의 메모리 공간이 할당되고, 이 공간에 반환 값이 저장된다.(반환 값으로 초기화가 된다.)
  -> 즉, 객체를 새로 생성해야 하고, 생성과 동시에 동일한 자료형의 객체로 최기화 해야 하는 상황에서 복사 생성자가 호출된다.

8. 할당 이후, 복사 생성자를 통한 초기화
  예제코드) PassObjCopycon.cpp
  - 함수 호출 후 초기화의 대상은 매개변수 ob객체이다. 그리고 ob객체는 obj객체로 초기화된다. 따라서, ob 객체의 복사 생성자가 호출되면서, 
    obj 객체가 인자로 전달되어야 한다. ob 객체의 복사 생성자가 호출되면서 obj 객체가 인자로 전달되어야 한다. 

  예제코드) ReturnObjCopycon.cpp
  - 객체를 반환하게 되면, 임시객체라는 것이 생성되고, 이 객체의 복사 생성자가 호출되면서 return문에 명시된 객체가 인자로 전달된다. 즉, 최종적으로 반환되는 값은
    새로 만들어진 객체의 참조값이다. (임시객체가 통째로 반환되는 것이 아니라, 임시객체는 메모리에 저장되고, 그 객체의 참조 값이 반환된다.)

9. 반환할 때 만들어지는 임시객체는 언제 사라지는가?
  예제코드) IKnowTempObj.cpp
    
