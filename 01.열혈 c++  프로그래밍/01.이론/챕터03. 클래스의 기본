1. 구조체의 등장배경?
  - 연관 있는 데이터를 하나로 묶으면, 프로그램의 구현 및 관리가 용이하다.
  - 이렇게 부류를 형성하는 데이터들은 함께 생성, 이동 및 소멸된다는 특성이 있다.  
    그래서, 구조체는 연관있는 데이터를 묶을 수 있는 문법적 장치로 데이터의 표현에 매우 큰 도움을 준다.
  - c++에서는 별도의 typedef 선언 없이도 구조체 변수를 선언할 수 있다. 
    c++에서는 기본 자료형 변수의 선언방식이나 구조체를 기반으로 정의된 자료형의 변수 선언 방식에 차이가 없다.

  예제코드) 01.RacingCar.cpp
  - 정의된 세 개의 함수는 구조체 Car와 함께 부류를 형성하여, Car와 관련된 데이터의 처리를 담당하는 함수이다.
    그러나, 전역함수의 형태를 띠기 때문에 이 함수들이 구조체 Car에 종속적임을 나타내지 못하고 있는 상황이다.
    따라서 엉뚱하게도 다른 영역에서 이 함수를 호출하는 실수를 범할 수도 있는 상황이다.

2. 구조체 안에 함수 삽입하기
  - c++에서는 구조체 안에 함수를 삽입하는 것을 허용한다. 
  - 구조체 안에 삽입된 함수는 매개변수를 통해서 연산의 대상정보를 전달받지 않아도 된다.
    구조체 내에 선언된 변수에 직접 접근이 가능해졌기 때문이다.

  예제코드) RacingCarFuncAdd.cpp

3. 구조체 안에 enum 상수의 선언 
  - RacingCarFuncAdd.cpp에 다음의 매크로 상수들이 존재한다.

    #define ID_LEN		20
    #define MAX_SPD		200
    #define FUEL_STEP	2
    #define ACC_STEP	10
    #define BRK_STEP	10
    - 이들 상수 역시 구조체 Car에게만 의미가 있는 상수들이다.
      즉, 다른 영역에서 사용하도록 정의된 상수가 아니니, 이들 상수도 구조체 내에 포함시키는 것이 좋을 수 있다.
      혹은 이름공간을 이용해서 상수가 사용되는 영역을 명시하는 것도 또 다른 방법이 될 수 있다.

      예시코드) RacingCarEnum.cpp

