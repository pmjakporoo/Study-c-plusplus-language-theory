1. 정보은닉의 이해
  예시코드) 01. RectangleFault.cpp
  - 객체가 멤버변수로 등장할 수 있다.
  - 해당 코드는 프로그래머의 실수에 대한 대책이 하나도 준비되어 있지 않다.
    (ex. 외부에서 범위를 넘어선 값이 들어와도 어쩔 도리가 없다.)
  - 제한된 방법으로의 접근만 허용을 해서 잘못된 값이 저장되지 않도록 도와야 하고,
    또 실수를 했을 때, 실수가 쉽게 발견되도록 해야 한다.

  예시코드) 02.Point.h
  - 멤버변수를 private로 선언해서 임의로 값이 저장되는 것을 막았다.
    즉, 정보를 은닉한 상황이다.
    대신에 값의 저장 및 참조를 위한 함수를 추가로 정의하였다.
    따라서, 이 함수 내에서 멤버변수에 저장되는 값을 제한할 수 있게 되었다.

  예시코드) 02.Point.cpp
  - 멤버변수에 값을 저장하는 함수들은 0이상 100이하의 값이 전달되지 않으면, 
    에러 메시지를 출력하면서 값의 저장을 허용하지 않는 형태로 정의 되었다.
    따라서 잘못된 값이 저장되지 않을 뿐더러, 값이 잘못 전달되는 경우 출력메시지를 통해
    문제가 있음을 확인할 수 있다.

    -> 멤버변수를 private로 선언하고, 해당 변수에 접근하는 함수를 별도로 정의해서,
       안전한 형태로 멤버변수의 접근을 유도하는 것이 바로 정보은닉이며,
       이는 좋은 클래스가 되기 위한 기본 조건이 된다.

    - int GetX() const, bool SetX(int xpos)와 같은 함수를 가리켜 엑세스 함수라하는데,
      이들은 멤버변수를 private로 선언하면서 클래스 외부에서의 멤버변수 접근을 목적으로 정의되는 함수이다.
