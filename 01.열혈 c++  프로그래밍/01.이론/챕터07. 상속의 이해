1. 상속이란?
  철수는 아버지로부터 좋은 목소리와 큰 키를 물려받았다.(상속 받았다.)
  따라서 철수는 자신이 지니고 있는 고유의 특성 이외에 아버지로부터 물려 받은 좋은 목소리와 큰 키라는 또 다른 특성을 
  함께 지니게 되었다. 

  UnivStudent 클래스가 Person 클래스를 상속 할 때,
  UnivStudent 클래스는 Person 클래스가 지니고 있는 모든 멤버를 물려받는다.
  즉, UnivStudent 객체에는 UnivStudent 클래스에 선언되어 있는 멤버뿐만 아니라, Person 클래스에 선언되어 있는
  멤버도 존재하게 된다. 

2. 상속의 방법과 그 결과
  [Person.h]
    #ifndef PERSON_HEADER 
    #define PERSON_HEADER
    
    #include <iostream>
    #include <cstring>
    
    using namespace std;
    
    class Person {
    	int age;
    	char name[50];
    
    public:
    	Person(int myage, char* myname) : age(myage) {
    		strcpy(name, myname);
    	}
    
    	void WhatYourName() const {
    		cout << "My name is " << name << endl;
    	}
    
    	void HowOldAreYou() const {
    		cout << "I'm " << age << " years old" << endl;
    	}
    };
    #endif

[UnivStudent.h]
    #include "Person.h"
    #ifndef UNIVSTUDENT_HEADER
    #define UNIVSTUDENT_HEADER
    
    class UnivStudent : public Person {
    	char major[50];
    
    public:
    	UnivStudent(char* myname, int myage, char* mymajor):Person(myage, myname) {
    		strcpy(major, mymajor);
    	}
    	void WhoAreYou() const {
    		WhatYourName();
    		HowOldAreYou();
    		cout << "My major is " << major << endl;
    	}
    };
    #endif

  - UnivStudent 클래스가 Person 클래스를 상속 받았다.
  - UnivStudent 클래스에는 WhatYourName(), HowOldAreYou()함수가 정의되어 있지 않음에도 불구하고,
    이 두 함수를 호출 할 수 있는 이유는 UnivStudent 클래스가 Person 클래스를 상속했기 때문이다.
    즉, 이 두 함수는 Person클래스의 멤버함수이기 때문에 호출이 가능하다.
    그리고 이것이 상속의 가장 두드러진 특징이다.
  
  - UnivStudent 클래스의 생성자에서는 Person 클래스 및 자기 자신의 초기화에 책임을 져야 한다.
    (UnivStudent 클래스의 생성자는 Person 클래스의 멤버까지 초기화해야 할 의무가 있다.)
  
  - UnivStudent 클래스의 생성자는, Person 클래스의 생성자를 호출해서 Person 클래스의 멤버를 초기화하는 것이 좋다.
  -> 즉, UnivStudent클래스의 생성자는 자신이 상속한 Person 클래스의 멤버를 초기화할 의무를 지닌다.
     그래서 UnivStudent의 생성자는 Person의 생성자를 호출하는 형태로 Person 클래스의 멤버를 초기화하는 것이 좋다.
  
  - UnivStudent 생성자의 매개변수를 보면 UnivStudent의 멤버뿐만 아니라, Person 멤버를 초기화 하기 위한 인자의 전달까지 요구하고 있다.
    그리고 이어서, 이니셜라이저가 등장하는데, 이것이 의미하는 바는 생성자의 호출이다.
    즉, Person 클래스의 생성자를 호출하면서 인자로 myage와 myname에 저장된 값을 전달하는 것이다.
    이렇듯 UnivStudent 클래스와 같이 상속받는 클래스는 이니셜라이저를 이용해서 상속하는 클래스의 생성자 호출을 명시할 수 있다.

3. 상속관련 완전한 예제의 확인 및 실행
  예제코드) UnivStudentInheri.cpp
  - UnivStudent 클래스의 멤버함수(또는 생성자) 내에서는 Person 클래스에 private로 선언된 멤버변수 age와 name에 직접 접근이 불가하다.
    왜냐하면 private 접근제한의 기준은 클래스 내부에 존재하는지 이기 떄문이다. 즉, 클래스 외부에서는 접근이 불가하다.
    따라서 UnivStudent의 멤버함수 내에서는 Person의 멤버변수에 직접 접근이 불가하다.
    따라서 Person 클래스에 정의된 public 함수를 통해서 간접적으로 접근을 해야 한다.
    이렇듯, 정보의 은닉은 하나의 객체(UnivStudent 객체) 내에서도 진행이 된다.

4. 용어의 정리 
  - Person         <-->         UnivStudent 
    상위 클래스                  하위 클래스
    기초(base) 클래스            유도(detrived) 클래스
    슈퍼(super) 클래스           서브(sub) 클래스
    부모 클래스                  자식 클래스

5. 유도 클래스의 객체 생성과정
  - 예제코드) DerivCreOrder.cpp
    - 유도 클래스의 객체 생성 과정에서 기초 클래스의 생성자는 100% 호출된다.
    - 유도 클래스의 생성자에서 기초 클래스의 생성자 호출을 명시하지 않으면, 기초 클래스의 void 생성자가 호출된다. 
    - 유도 클래스의 객체 생성과정에서는 생성자가 두 번 호출된다.
      하나는 기초 클래스의 생성자이고, 다른 하나는 유도 클래스의 생성자이다.

6. 유도 클래스 객체의 소멸과정
  - 유도 클래스의 객체 생성과정에서는 생성자가 두 번 호출된다.
  - 유도 클래스의 객체 소멸 과정에서도 소멸자가 두 번 호출됨을 유추할 수 있다.
  예제코드) DerivDestOrder.cpp
    - 유도 클래스의 객체가 소멸될 때에는, 유도 클래스의 소멸자가 실행되고 난 다음에 기초 클래스의 소멸자가 실행된다.
    - 스택에 생성된 객체의 소멸 순서는 생성 순서와 반대이다.
    - 기초 클래스의 소멸자도, 유도 클래스이 소멸자도 호출된다.
    - 생성자에서 동적 할당한 메모리 공간은 소멸자에서 해제한다.

  에제코드) DestModel.cpp

9. protected로 선언된 멤버가 허용하는 접근의 범위 
  - c++의 접근 제어 지시자에는 private, protected, pubilc 3가지가 존재한다.
    이들이 허용하는 접근의 범위에는 다음과 같다.
    private < protected < public
    즉, public이 허용하는 접근의 범위가 가장 넓고, private가 허용하는 접근의 범위가 가장 좁다.

    protected ? 
    - protected로 선언된 멤버변수는 이를 상속하는 유도 클래스에서 접근이 가능하다.
      이것이 private와의 유일한 차이점이다.
      유도 클래스에게만 제한적으로 접근을 허용한다는 측면에서 유용하게 사용될 수 있겠지만,
      기본적으로 기초 클래스와 이를 상속하는 유도 클래스 사이에서도 정보은닉은 지켜지는 게 좋다.

      ex)
        class Base {
          int num1;
        protected:
          int num2;
        public:
          int num3;
          void ShowData() {
            cout << num1 <<", " << num2 << ", " << num3;
          }
        }

        class Derived : public Base {
        public:
          void ShowBaseMember() {
            cout << num1; // 컴파일 에러
            cout << num2; // 컴파일 OK
            cout << num3; // 컴파일 OK
          }
        }

10. 세가지 형태의 상속
  - public 상속 : ex) class Derived: public Base { ... }
    - public보다 접근의 범위가 넓은 멤버는 public으로 변경시켜서 상속하겠다.
      즉, private를 제외한 나머지는 그냥 그대로 상속한다.
      private멤버는 접근 불가의 형태로 상속을 하지만, protected 멤버는 protected로, public 멤버는 public으로 상속이 진행된다.
  - protected 상속 : ex) class Derived: protected Base { ... }
    - protected보다 접근 범위가 넓은(public) 멤버는 protected로 변경시켜서 상속한다.
    ex) 
      class Base {
        int num1;
      protected:
        int num2;
      public: 
        int num3;
      }

      class Derived: protected Base {
        접근불가: 
          int num1;
        protected:
          int num2;
        protected:
          int num3;
      }

      예시코드) ProtectedHeri.cpp
        
  - private 상속 : ex) class Derived: private Base { ... }
    - private 보다 접근의 범위가 넓은 멤버는 private로 변경시켜서 상속한다.
     ex) 
      class Base {
        int num1;
      protected:
        int num2;
      public: 
        int num3;
      }

      class Derived: private Base {
        접근불가: 
          int num1;
        private:
          int num2;
        private:
          int num3;
      }

      -> 때문에 num2, num3은 Derived 클래스 내에서만 접근이 가능한 멤버가 된다.
         그리고 다른 클랫스가 이 클래스를 다음과 같이 상속한다면,
         class DeDerived: public Derived {
            접근불가: 
              int num1;
            접근불가: 
              int num2;
            접근불가: 
              int num3;
         }
          -> 이렇듯, private 상속이 이뤄진 클래스를 다시 상속할 경우, 멤버함수를 포함하여 모든 멤버가 접근 불가가 되기 때문에 
             사실상 의미없는 상속이 되고 만다.

11. 상속을 위한 기본 조건인 is-a 관계의 성립 
  - 전화기 -> 무선전화기
  - 컴퓨터 -> 노트북 컴퓨터
  -> 전화기와 컴퓨터의 기본 기능은 각각 통화와 계산이다. 그런데 무선 전화기와 노트북 컴퓨터는 여기에다가 이동성이라는 특성이 추가되었다.
     따라서 전화기와 컴퓨터를 기초 클래스로, 무선 전화기와 노트북 컴퓨터를 각각의 유도 클래스로 정의하는 것은 매우 타당하다.
    그리고 이러한 상속 관계가 성립하면, 다음과 같은 문장이 구성되는 특징이 있다.
    - 무선전화기는 일종의 전화기이다.
    - 노트북 컴퓨터는 일종의 컴퓨터이다.

    다시말해서, 무선 전화기도 전화기이고, 노트북 컴퓨터도 컴퓨터인 것이다. 이 두 문장을 영어 반, 한글 반 섞어서 표현하면 다음과 같다.
    - 무선전화기 is a 전화기
    - 노트북 컴퓨터 is a 컴퓨터
    즉, 상속 관계사 성립하려면 기초 클래스와 유도 클래스 간에 IS-A 관계가 성립해야 한다.

    예시코드) ISAInheritance.cpp
